# -*- coding: utf-8 -*-

"""
(Description)

Created on Jun 25, 2015
"""
from sqlalchemy.orm import relationship
from sqlalchemy.schema import Column, ForeignKey
from sqlalchemy.types import Boolean, Unicode, UnicodeText, Integer, DateTime, BigInteger

from ce1sus.db.classes.basedbobject import ExtendedLogingInformations
from ce1sus.db.classes.common import TLP, Properties
from ce1sus.db.common.session import Base


__author__ = 'Weber Jean-Paul'
__email__ = 'jean-paul.weber@govcert.etat.lu'
__copyright__ = 'Copyright 2013-2014, GOVCERT Luxembourg'
__license__ = 'GPL v3+'

class VulnReference(ExtendedLogingInformations, Base):
  # can be anyurl
  value = Column('anyurl', Unicode(255, collation='utf8_unicode_ci'))

  # custom ones related to ce1sus internals
  dbcode = Column('code', Integer, default=0, nullable=False, index=True)
  __bit_code = None
  tlp_level_id = Column('tlp_level_id', Integer, default=3, nullable=False)

  vulnerability_id = Column('vulnerability_id', BigInteger, ForeignKey('vulnerabilitys.vulnerability_id', onupdate='cascade', ondelete='cascade'), nullable=False, index=True)

  @property
  def tlp(self):
    """
      returns the tlp level

      :returns: String
    """

    return TLP.get_by_id(self.tlp_level_id)

  @tlp.setter
  def tlp(self, text):
    """
    returns the status

    :returns: String
    """
    self.tlp_level_id = TLP.get_by_value(text)

  @property
  def properties(self):
    """
    Property for the bit_value
    """
    if self.__bit_code is None:
      if self.dbcode is None:
        self.__bit_code = Properties('0', self)
      else:
        self.__bit_code = Properties(self.dbcode, self)
    return self.__bit_code


class Vulnerability(ExtendedLogingInformations, Base):

  is_known = Column('is_known', Boolean, default=None)
  is_publicly_acknowledged = Column('is_publicly_acknowledged', Boolean, default=None)
  title = Column('title', Unicode(255, collation='utf8_unicode_ci'), index=True, nullable=True)
  description = Column('description', UnicodeText(collation='utf8_unicode_ci'))
  short_description = Column('short_description', Unicode(255, collation='utf8_unicode_ci'))
  cve_id = Column('cve_id', Integer)
  osvdb_id = Column('osvdb_id', Integer)

  # The Source field describes the source of the CVE or OSVDB as a textual description or URL.
  source = Column('source', Unicode(255, collation='utf8_unicode_ci'))

  # TODO cvss_score
  # cvss_score = None
  discovered_datetime = Column(DateTime, default=None)
  published_datetime = Column(DateTime, default=None)
  # TODO: affected_software
  # affected_software = None
  references = relationship(VulnReference)

  # custom ones related to ce1sus internals
  dbcode = Column('code', Integer, default=0, nullable=False, index=True)
  __bit_code = None
  tlp_level_id = Column('tlp_level_id', Integer, default=3, nullable=False)

  exploittarget_id = Column('exploittarget_id', BigInteger, ForeignKey('exploittargets.exploittarget_id', onupdate='cascade', ondelete='cascade'), nullable=False, index=True)

  @property
  def tlp(self):
    """
      returns the tlp level

      :returns: String
    """

    return TLP.get_by_id(self.tlp_level_id)

  @tlp.setter
  def tlp(self, text):
    """
    returns the status

    :returns: String
    """
    self.tlp_level_id = TLP.get_by_value(text)

  @property
  def properties(self):
    """
    Property for the bit_value
    """
    if self.__bit_code is None:
      if self.dbcode is None:
        self.__bit_code = Properties('0', self)
      else:
        self.__bit_code = Properties(self.dbcode, self)
    return self.__bit_code
