# -*- coding: utf-8 -*-

"""
(Description)

Created on Jul 27, 2015
"""
from sqlalchemy.orm import relationship
from sqlalchemy.schema import Column, ForeignKey
from sqlalchemy.sql.schema import Table

from ce1sus.common import merge_dictionaries
from ce1sus.db.classes.common.baseelements import Entity
from ce1sus.db.classes.cstix.common.structured_text import StructuredText
from ce1sus.db.classes.internal.core import BigIntegerType, UnicodeType
from ce1sus.db.common.session import Base


__author__ = 'Weber Jean-Paul'
__email__ = 'jean-paul.weber@govcert.etat.lu'
__copyright__ = 'Copyright 2013-2014, GOVCERT Luxembourg'
__license__ = 'GPL v3+'

_REL_CONFIGURATION_STRUCTUREDTEXT = Table('rel_configuration_structuredtext', getattr(Base, 'metadata'),
                                       Column('rtconfigurationst_id', BigIntegerType, primary_key=True, nullable=False, index=True),
                                       Column('configuration_id',
                                              BigIntegerType,
                                              ForeignKey('configurations.configuration_id',
                                                         ondelete='cascade',
                                                         onupdate='cascade'),
                                              index=True,
                                              nullable=False),
                                       Column('structuredtext_id',
                                             BigIntegerType,
                                             ForeignKey('structuredtexts.structuredtext_id',
                                                        ondelete='cascade',
                                                        onupdate='cascade'),
                                              nullable=False,
                                              index=True)
                                       )

_REL_CONFIGURATION_STRUCTUREDTEXT_SHORT = Table('rel_configuration_structuredtext_short', getattr(Base, 'metadata'),
                                       Column('rtconfigurationst_id', BigIntegerType, primary_key=True, nullable=False, index=True),
                                       Column('configuration_id',
                                              BigIntegerType,
                                              ForeignKey('configurations.configuration_id',
                                                         ondelete='cascade',
                                                         onupdate='cascade'),
                                              index=True,
                                              nullable=False),
                                       Column('structuredtext_id',
                                             BigIntegerType,
                                             ForeignKey('structuredtexts.structuredtext_id',
                                                        ondelete='cascade',
                                                        onupdate='cascade'),
                                              nullable=False,
                                              index=True)
                                       )


class Configuration(Entity, Base):
  description = relationship(StructuredText, secondary=_REL_CONFIGURATION_STRUCTUREDTEXT, uselist=False, backref='configuration_description')
  short_description = relationship(StructuredText, secondary=_REL_CONFIGURATION_STRUCTUREDTEXT_SHORT, uselist=False, backref='configuration_short_description')

  cce_id = Column('cce_id', UnicodeType(255))

  exploittarget_id = Column('exploittarget_id', BigIntegerType, ForeignKey('exploittargets.exploittarget_id', onupdate='cascade', ondelete='cascade'), nullable=False, index=True)

  @property
  def parent(self):
    return self.exploit_target

  def to_dict(self, cache_object):
    if cache_object.complete:
      result = {'description': self.attribute_to_dict(self.description, cache_object),
                'short_description': self.attribute_to_dict(self.short_description, cache_object),
                'cce_id': self.convert_value(self.cce_id),
                }
    else:
      result = {'cce_id': self.convert_value(self.cce_id),
                }

    parent_dict = Entity.to_dict(self, cache_object)
    return merge_dictionaries(result, parent_dict)
