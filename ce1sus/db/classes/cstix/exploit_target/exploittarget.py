# -*- coding: utf-8 -*-

"""
(Description)

Created on Jun 25, 2015
"""
from sqlalchemy.orm import relationship
from sqlalchemy.schema import Column, ForeignKey

from ce1sus.common import merge_dictionaries
from ce1sus.db.classes.cstix.base import BaseCoreComponent
from ce1sus.db.classes.cstix.common.related import RelatedPackageRef, RelatedExploitTarget
from ce1sus.db.classes.cstix.data_marking import MarkingSpecification
from ce1sus.db.classes.cstix.exploit_target.configuration import Configuration
from ce1sus.db.classes.cstix.exploit_target.relations import _REL_EXPLOITTARGET_RELATED_EXPLOITTARGET, _REL_EXPLOITTARGET_RELATED_PACKAGES, \
  _REL_EXPLOITTARGET_HANDLING
from ce1sus.db.classes.cstix.exploit_target.vulnerability import Vulnerability
from ce1sus.db.classes.cstix.exploit_target.weakness import Weakness
from ce1sus.db.classes.internal.corebase import BigIntegerType
from ce1sus.db.common.session import Base


__author__ = 'Weber Jean-Paul'
__email__ = 'jean-paul.weber@govcert.etat.lu'
__copyright__ = 'Copyright 2013-2014, GOVCERT Luxembourg'
__license__ = 'GPL v3+'


class ExploitTarget(BaseCoreComponent, Base):

  # TODO: potential_coas
  # potential_coas = None
  related_exploit_targets = relationship(RelatedExploitTarget, secondary=_REL_EXPLOITTARGET_RELATED_EXPLOITTARGET)
  vulnerabilities = relationship(Vulnerability)
  weaknesses = relationship(Weakness)
  configuration = relationship(Configuration)
  related_packages = relationship(RelatedPackageRef, secondary=_REL_EXPLOITTARGET_RELATED_PACKAGES)
  handling = relationship(MarkingSpecification, secondary=_REL_EXPLOITTARGET_HANDLING)
  event_id = Column('event_id', BigIntegerType, ForeignKey('events.event_id', onupdate='cascade', ondelete='cascade'), nullable=False, index=True)

  _PARENTS = ['event', 'related_exploit_target']
  # related_exploit_target = relationship('ExploitTarget', uselist=False, primaryjoin='RelatedExploitTarget.child_id==ExploitTarget.identifier')
  event = relationship('Event', uselist=False)

  def to_dict(self, cache_object):
    result = {'related_exploit_targets': self.attributelist_to_dict(self.related_exploit_targets, cache_object),
              'vulnerabilities': self.attributelist_to_dict(self.vulnerabilities, cache_object),
              'weaknesses': self.attributelist_to_dict(self.weaknesses, cache_object),
              'configuration': self.attributelist_to_dict(self.configuration, cache_object),
              'related_packages': self.attributelist_to_dict(self.related_packages, cache_object),
              'handling': self.attributelist_to_dict(self.handling, cache_object),
              'information_source': self.attribute_to_dict(self.information_source, cache_object),
              }

    parent_dict = BaseCoreComponent.to_dict(self, cache_object)
    return merge_dictionaries(result, parent_dict)
