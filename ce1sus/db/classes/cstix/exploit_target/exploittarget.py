# -*- coding: utf-8 -*-

"""
(Description)

Created on Jun 25, 2015
"""
from sqlalchemy.orm import relationship
from sqlalchemy.schema import Column, ForeignKey, Table

from ce1sus.common import merge_dictionaries
from ce1sus.db.classes.cstix.base import BaseCoreComponent
from ce1sus.db.classes.cstix.common.information_source import InformationSource
from ce1sus.db.classes.cstix.common.related import RelatedPackageRef, RelatedExploitTarget
from ce1sus.db.classes.cstix.data_marking import MarkingSpecification
from ce1sus.db.classes.cstix.exploit_target.configuration import Configuration
from ce1sus.db.classes.cstix.exploit_target.vulnerability import Vulnerability
from ce1sus.db.classes.cstix.exploit_target.weakness import Weakness
from ce1sus.db.classes.internal.corebase import BigIntegerType
from ce1sus.db.common.session import Base


__author__ = 'Weber Jean-Paul'
__email__ = 'jean-paul.weber@govcert.etat.lu'
__copyright__ = 'Copyright 2013-2014, GOVCERT Luxembourg'
__license__ = 'GPL v3+'


_REL_EXPLOITTARGET_HANDLING = Table('rel_exploittarget_handling', getattr(Base, 'metadata'),
                                    Column('reh_id', BigIntegerType, primary_key=True, nullable=False, index=True),
                                    Column('exploittarget_id', BigIntegerType, ForeignKey('exploittargets.exploittarget_id', ondelete='cascade', onupdate='cascade'), nullable=False, index=True),
                                    Column('markingspecification_id', BigIntegerType, ForeignKey('markingspecifications.markingspecification_id', ondelete='cascade', onupdate='cascade'), nullable=False, index=True)
                                    )

_REL_EXPLOITTARGET_RELATED_PACKAGES = Table('rel_exploit_target_rel_package', getattr(Base, 'metadata'),
                                            Column('rir_id', BigIntegerType, primary_key=True, nullable=False, index=True),
                                            Column('exploittarget_id', BigIntegerType, ForeignKey('exploittargets.exploittarget_id', ondelete='cascade', onupdate='cascade'), nullable=False, index=True),
                                            Column('relatedpackageref_id', BigIntegerType, ForeignKey('relatedpackagerefs.relatedpackageref_id', ondelete='cascade', onupdate='cascade'), nullable=False, index=True)
                                            )

_REL_EXPLOITTARGET_RELATED_EXPLOITTARGET = Table('rel_exploit_target_rel_exploit_target', getattr(Base, 'metadata'),
                                            Column('retret_id', BigIntegerType, primary_key=True, nullable=False, index=True),
                                            Column('exploittarget_id', BigIntegerType, ForeignKey('exploittargets.exploittarget_id', ondelete='cascade', onupdate='cascade'), nullable=False, index=True),
                                            Column('relatedexploittarget_id', BigIntegerType, ForeignKey('relatedexploittargets.relatedexploittarget_id', ondelete='cascade', onupdate='cascade'), nullable=False, index=True)
                                            )

_REL_EXPLOITTARGET_STRUCTUREDTEXT = Table('rel_exploittarget_structuredtext', getattr(Base, 'metadata'),
                                       Column('retst_id', BigIntegerType, primary_key=True, nullable=False, index=True),
                                       Column('exploittarget_id',
                                              BigIntegerType,
                                              ForeignKey('exploittargets.exploittarget_id',
                                                         ondelete='cascade',
                                                         onupdate='cascade'),
                                              index=True,
                                              nullable=False),
                                       Column('structuredtext_id',
                                             BigIntegerType,
                                             ForeignKey('structuredtexts.structuredtext_id',
                                                        ondelete='cascade',
                                                        onupdate='cascade'),
                                              nullable=False,
                                              index=True)
                                       )

_REL_EXPLOITTARGET_STRUCTUREDTEXT_SHORT = Table('rel_exploittarget_structuredtext_short', getattr(Base, 'metadata'),
                                       Column('retst_id', BigIntegerType, primary_key=True, nullable=False, index=True),
                                       Column('exploittarget_id',
                                              BigIntegerType,
                                              ForeignKey('exploittargets.exploittarget_id',
                                                         ondelete='cascade',
                                                         onupdate='cascade'),
                                              index=True,
                                              nullable=False),
                                       Column('structuredtext_id',
                                             BigIntegerType,
                                             ForeignKey('structuredtexts.structuredtext_id',
                                                        ondelete='cascade',
                                                        onupdate='cascade'),
                                              nullable=False,
                                              index=True)
                                       )

_REL_EXPLOITTARGET_INFORMATIONSOURCE = Table('rel_exploittarget_informationsource', getattr(Base, 'metadata'),
                                       Column('retst_id', BigIntegerType, primary_key=True, nullable=False, index=True),
                                       Column('exploittarget_id',
                                              BigIntegerType,
                                              ForeignKey('exploittargets.exploittarget_id',
                                                         ondelete='cascade',
                                                         onupdate='cascade'),
                                              index=True,
                                              nullable=False),
                                       Column('informationsource_id',
                                             BigIntegerType,
                                             ForeignKey('informationsources.informationsource_id',
                                                        ondelete='cascade',
                                                        onupdate='cascade'),
                                              nullable=False,
                                              index=True)
                                       )

class ExploitTarget(BaseCoreComponent, Base):

  # TODO: potential_coas
  # potential_coas = None
  related_exploit_targets = relationship(RelatedExploitTarget, secondary=_REL_EXPLOITTARGET_RELATED_EXPLOITTARGET, backref='exploit_target')
  vulnerabilities = relationship(Vulnerability, backref='exploit_target')
  weaknesses = relationship(Weakness, backref='exploit_target')
  configuration = relationship(Configuration, backref='exploit_target')
  related_packages = relationship(RelatedPackageRef, secondary=_REL_EXPLOITTARGET_RELATED_PACKAGES, backref='exploit_target')
  handling = relationship(MarkingSpecification, secondary=_REL_EXPLOITTARGET_HANDLING, backref='exploit_target')
  information_source = relationship(InformationSource, secondary=_REL_EXPLOITTARGET_INFORMATIONSOURCE, backref='exploit_target')

  event_id = Column('event_id', BigIntegerType, ForeignKey('events.event_id', onupdate='cascade', ondelete='cascade'), nullable=False, index=True)

  _PARENTS = ['event', 'related_exploit_target']

  def to_dict(self, cache_object):
    result = {'related_exploit_targets': self.attributelist_to_dict(self.related_exploit_targets, cache_object),
              'vulnerabilities': self.attributelist_to_dict(self.vulnerabilities, cache_object),
              'weaknesses': self.attributelist_to_dict(self.weaknesses, cache_object),
              'configuration': self.attributelist_to_dict(self.configuration, cache_object),
              'related_packages': self.attributelist_to_dict(self.related_packages, cache_object),
              'handling': self.attributelist_to_dict(self.handling, cache_object),
              'information_source': self.attribute_to_dict(self.information_source, cache_object),
              }

    parent_dict = BaseCoreComponent.to_dict(self, cache_object)
    return merge_dictionaries(result, parent_dict)
