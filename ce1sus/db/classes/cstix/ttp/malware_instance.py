# -*- coding: utf-8 -*-

"""
(Description)

Created on Jul 28, 2015
"""
from sqlalchemy.ext.hybrid import hybrid_property
from sqlalchemy.orm import relationship
from sqlalchemy.schema import Column, ForeignKey, Table
from sqlalchemy.types import Integer

from ce1sus.common import merge_dictionaries
from ce1sus.db.classes.common.baseelements import Entity
from ce1sus.db.classes.cstix.common.structured_text import StructuredText
from ce1sus.db.classes.cstix.common.vocabs import MalwareType as VocabMalwareType
from ce1sus.db.classes.internal.corebase import BigIntegerType, UnicodeType
from ce1sus.db.common.session import Base


__author__ = 'Weber Jean-Paul'
__email__ = 'jean-paul.weber@govcert.etat.lu'
__copyright__ = 'Copyright 2013-2014, GOVCERT Luxembourg'
__license__ = 'GPL v3+'

_REL_MALWAREINSTANCE_STRUCTUREDTEXT = Table('rel_malwareinstance_structuredtext', getattr(Base, 'metadata'),
                                       Column('rist_id', BigIntegerType, primary_key=True, nullable=False, index=True),
                                       Column('malwareinstance_id',
                                              BigIntegerType,
                                              ForeignKey('malwareinstances.malwareinstance_id',
                                                         ondelete='cascade',
                                                         onupdate='cascade'),
                                              index=True,
                                              nullable=False),
                                       Column('structuredtext_id',
                                             BigIntegerType,
                                             ForeignKey('structuredtexts.structuredtext_id',
                                                        ondelete='cascade',
                                                        onupdate='cascade'),
                                              nullable=False,
                                              index=True)
                                       )

_REL_MALWAREINSTANCE_STRUCTUREDTEXT_SHORT = Table('rel_malwareinstance_structuredtext_short', getattr(Base, 'metadata'),
                                       Column('rist_id', BigIntegerType, primary_key=True, nullable=False, index=True),
                                       Column('malwareinstance_id',
                                              BigIntegerType,
                                              ForeignKey('malwareinstances.malwareinstance_id',
                                                         ondelete='cascade',
                                                         onupdate='cascade'),
                                              index=True,
                                              nullable=False),
                                       Column('structuredtext_id',
                                             BigIntegerType,
                                             ForeignKey('structuredtexts.structuredtext_id',
                                                        ondelete='cascade',
                                                        onupdate='cascade'),
                                              nullable=False,
                                              index=True)
                                       )



class MalwareInstance(Entity, Base):

  @hybrid_property
  def id_(self):
    return u'{0}:{1}-{3}'.format(self.namespace, self.__class__.__name__, self.uuid)

  @id_.setter
  def id_(self, value):
    self.set_id(value)

  _PARENTS = ['behaviour']

  title = Column('title', UnicodeType(255), index=True, nullable=True)
  description = relationship(StructuredText, secondary=_REL_MALWAREINSTANCE_STRUCTUREDTEXT, uselist=False, backref='malware_instance_description')
  short_description = relationship(StructuredText, secondary=_REL_MALWAREINSTANCE_STRUCTUREDTEXT_SHORT, uselist=False, backref='malware_instance_short_description')
  behavior_id = Column('behavior_id', BigIntegerType, ForeignKey('behaviors.behavior_id', onupdate='cascade', ondelete='cascade'), nullable=False, index=True)
  names = relationship('MalwareName', backref='malware_instance')
  types = relationship('MalwareType', backref='malware_instance')

  def to_dict(self, cache_object):

    result = {
              'id_': self.convert_value(self.id_),
              'title': self.convert_value(self.title),
              'description': self.attribute_to_dict(self.description, cache_object),
              'short_description': self.attribute_to_dict(self.short_description, cache_object),
              'names': self.attributelist_to_dict(self.names, cache_object),
              'types': self.attributelist_to_dict(self.types, cache_object)
              }

    parent_dict = Entity.to_dict(self, cache_object)
    return merge_dictionaries(result, parent_dict)

class MalwareName(Entity, Base):
  name = Column('name', UnicodeType(255), default=None)
  malwareinstance_id = Column(BigIntegerType, ForeignKey('malwareinstances.malwareinstance_id', ondelete='cascade', onupdate='cascade'), index=True, nullable=False)

  _PARENTS = ['malware_instance']

  def to_dict(self, cache_object):

    result = {
              'name': self.convert_value(self.name),
              }

    parent_dict = Entity.to_dict(self, cache_object)
    return merge_dictionaries(result, parent_dict)

class MalwareType(Entity, Base):
  type_id = Column('type_id', Integer, default=None)
  malwareinstance_id = Column(BigIntegerType, ForeignKey('malwareinstances.malwareinstance_id', ondelete='cascade', onupdate='cascade'), index=True, nullable=False)
  __type_ = None

  _PARENTS = ['malware_instance']

  @property
  def type_(self):
    if not self.__type_:
      if self.status_id:
        self.__type_ = VocabMalwareType(self, 'type_id')
    return self.__type_

  @type_.setter
  def type_(self, type_):
    if not self.type_:
      self.__type_ = VocabMalwareType(self, 'type_id')
    self.type_.name = type_


  @property
  def name(self):
    return self.type_

  def to_dict(self, cache_object):

    result = {
              'type_': self.convert_value(self.type_),
              'name': self.convert_value(self.name),
              }

    parent_dict = Entity.to_dict(self, cache_object)
    return merge_dictionaries(result, parent_dict)
