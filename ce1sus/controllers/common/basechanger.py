# -*- coding: utf-8 -*-

"""
(Description)

Created on Aug 5, 2015
"""
from ce1sus.helpers.common import strings
from datetime import datetime
import uuid

from ce1sus.controllers.base import BaseController
from ce1sus.db.classes.ccybox.common.time import CyboxTime
from ce1sus.db.classes.common.baseelements import Entity
from ce1sus.db.classes.cstix.base import BaseCoreComponent
from ce1sus.db.classes.cstix.common.datetimewithprecision import DateTimeWithPrecision
from ce1sus.db.classes.cstix.common.identity import Identity
from ce1sus.db.classes.cstix.common.information_source import InformationSource, InformationSourceRole
from ce1sus.db.classes.cstix.common.related import RelatedIdentity
from ce1sus.db.classes.cstix.common.structured_text import StructuredText
from ce1sus.db.classes.cstix.common.tools import ToolInformation
from ce1sus.db.classes.cstix.data_marking import MarkingSpecification, MarkingStructure
from ce1sus.db.classes.internal.common import Properties
from ce1sus.db.classes.internal.core import BaseElement, ExtendedLogingInformations, SimpleLogingInformations, BaseObject
from ce1sus.db.classes.internal.usrmgt.group import Group
from ce1sus.db.common.broker import NothingFoundException
from ce1sus.helpers.version import Version


__author__ = 'Weber Jean-Paul'
__email__ = 'jean-paul.weber@govcert.etat.lu'
__copyright__ = 'Copyright 2013-2014, GOVCERT Luxembourg'
__license__ = 'GPL v3+'

class BaseChangerException(Exception):
  pass

class AssemblerException(BaseChangerException):
  pass

class UpdaterException(BaseChangerException):
  pass

class MergerException(BaseChangerException):
  pass

class BaseChanger(BaseController):

  def __set_baseobject(self, instance, json):
    # instance.identifier autogenerated by DB
    if json:
      instance.uuid = json.get('identifier', None)
    if instance.uuid is None:
      instance.uuid = '{0}'.format(uuid.uuid4())

  def __set_simple_logging(self, instance, json, cache_object):
    self.__set_baseobject(instance, json)
    if json:
      if cache_object.insert:
        # the creator is always the user who inserted it into the DB
        instance.creator = cache_object.user

        created_at = json.get('created_at', None)
        if created_at:
          instance.created_at = strings.stringToDateTime(created_at)
        else:
          instance.created_at = cache_object.created_at

      # the modifier is always the user who inserted it into the DB
      instance.modifier = cache_object.user

      modified_on = json.get('modified_on', None)
      if modified_on:
        instance.modified_on = strings.stringToDateTime(modified_on)
      else:
        instance.modified_on = cache_object.modified_on

    else:
      if cache_object.insert:
        # the creator is always the user who inserted it into the DB
        instance.creator = cache_object.user
        instance.created_at = datetime.utcnow()

      instance.modifier = cache_object.user
      instance.modified_on = datetime.utcnow()

  def __set_extended_logging(self, instance, json, cache_object):
    self.__set_simple_logging(instance, json, cache_object)
    if cache_object.insert:
      if json:
        # the creator group is always the group of the user, this is to enable that the group has access to these events
        # even when the user got his group changed or revoked.
        # However this can be set from externally as i.e. inserts from misp or stix uploads
        creat_grp = json.get('creator_group', None)
        if creat_grp:
          instance.creator_group = self.get_set_group(creat_grp, cache_object)
        else:
          instance.creator_group = cache_object.user.group
      else:
        instance.creator_group = cache_object.user.group

  def __set_properties(self, instance, json, cache_object):
    if json:
      instance.properties.is_validated = json.get('validated', False)

      instance.properties.is_shareable = json.get('shared', False)
    # Set it as proposal if the user is not the event owner
    self.set_properties_according_to_permisssions(instance.properties, cache_object)



  def set_properties_according_to_permisssions(self, properties, cache_object):
    if cache_object.owner:
      properties.is_proposal = False
      # owners are directly validated
      # TODO:ADD auto validate feature
      properties.is_validated = True
    else:
      properties.is_proposal = True

    properties.is_rest_instert = cache_object.rest_insert
    properties.is_web_insert = not cache_object.rest_insert

  def __set_baseelement(self, instance, json, cache_object, parent, change_base_element=True):
    self.__set_extended_logging(instance, json, cache_object)

    if json and change_base_element:
      # populate properties
      self.__set_properties(instance, json.get('properties', None), cache_object)

      # populate tlp
      tlp = json.get('tlp', None)
      if tlp:
        instance.tlp = tlp.title()
      else:
        instance.tlp = parent.tlp
    else:
      instance.properties = Properties('0', instance)

      self.set_properties_according_to_permisssions(instance.properties, cache_object)

      if parent:
        instance.tlp = parent.tlp
      else:
        instance.tlp = 'Amber'

  def __set_entity(self, instance, json, cache_object, parent, change_base_element=True):
    self.__set_baseelement(instance, json, cache_object, parent, change_base_element)

  def __set_basecomponent(self, instance, json, cache_object, parent, change_base_element=True):
    self.__set_entity(instance, json, cache_object, parent, change_base_element)

    if json:
      instance.id_ = json.get('id_', None)
      idref = json.get('idref', None)
      if not idref:
        description = json.get('description', None)
        if description:
          description = self.assemble_structured_text(instance, description, cache_object)
          instance.description = description
        short_description = json.get('short_description', None)
        if short_description:
          short_description = self.assemble_structured_text(instance, short_description, cache_object)
          instance.short_description = short_description
      information_source = json.get('information_source', None)
      if information_source:
        information_source = self.assemble_information_source(instance, information_source, cache_object)
        instance.information_source = information_source
      handling = json.get('handling', None)
      if handling:
        handling = self.assemble_handling(instance, handling, cache_object)
        instance.handling = handling

      instance.title = json.get('title', None)
      version = json.get('version', None)
      instance.version = Version(version, instance)

  def get_set_group(self, json, cache_object, return_none=False):
    # If the group does not exist or cannot be created return the users group
    group = None
    if json:
      name = json.get('name', None)
      if name:
        grp = None
        for value in cache_object.seen_groups.itervalues():
          if value.name == name:
            grp = value
            break
        if grp:
          group = grp
        else:
          try:
            group = self.group_broker.get_by_name(name)
          except NothingFoundException:
            group = Group()
            group.populate(json)
            self.group_broker.insert(group, False)
          cache_object.seen_groups[group.uuid] = group
      else:
        # check if group exists
        uuid = json.get('identifier', None)
        if uuid:
          grp = cache_object.seen_groups.get(uuid, None)
          if grp:
            group = grp
          else:
            try:
              group = self.group_broker.get_by_uuid(uuid)
            except NothingFoundException:
              # Create the group automatically
              group = Group()
              group.populate(json)
              group.uuid = uuid
              self.group_broker.insert(group, False)

            cache_object.seen_groups[group.uuid] = group

    if not group and not return_none:
      group = cache_object.user.group

    return group

  def set_base(self, instance, json, cache_object, parent, change_base_element=True):
    if isinstance(instance, BaseCoreComponent):
      self.__set_basecomponent(instance, json, cache_object, parent, change_base_element)
    elif isinstance(instance, Entity):
      self.__set_entity(instance, json, cache_object, parent, change_base_element)
    elif isinstance(instance, BaseElement):
      self.__set_baseelement(instance, json, cache_object, parent, change_base_element)
    elif isinstance(instance, ExtendedLogingInformations):
      self.__set_extended_logging(instance, json, cache_object)
    elif isinstance(instance, SimpleLogingInformations):
      self.__set_simple_logging(instance, json, cache_object)
    elif isinstance(instance, BaseObject):
      self.__set_baseobject(instance, json)

  def assemble_structured_text(self, parent, json, cache_object):
    instance = StructuredText()
    self.set_base(instance, json, cache_object, parent)
    if json:
      instance.id_ = json.get('id_', None)
      instance.value = json.get('value', None)
      instance.structuring_format = json.get('structuring_format', 'text')
      instance.ordinality = json.get('ordinality', None)
      return instance

  def assemble_information_source(self, parent, json, cache_object):
    instance = InformationSource()
    self.set_base(instance, json, cache_object, parent)
    if json:
      description = json.get('description', None)
      if description:
        description = self.assemble_structured_text(instance, description, cache_object)
        instance.description = description
      identity = json.get('identity', None)
      if identity:
        identity = self.assemble_identity(instance, identity, cache_object)
      contributing_sources = json.get('contributing_sources', None)
      if contributing_sources:
        for contributing_source in contributing_sources:
          contributing_source = self.assemble_information_source(instance, contributing_source, cache_object)
      time = json.get('time', None)
      if time:
        time = self.assemble_cybox_time(instance, time, cache_object)
        instance.time = time
      tools = json.get('tools', None)
      if tools:
        for tool in tools:
          tool = self.assemble_toolinformation(instance, tool, cache_object)
          instance.tools.append(tool)

      roles = json.get('roles', None)
      if roles:
        for role in roles:
          role = self.assemble_information_source_role(instance, role, cache_object)
          instance.roles.append(role)

  def assemble_identity(self, parent, json, cache_object):
    instance = Identity()
    self.set_base(instance, json, cache_object, parent)
    if json:
      instance.id_ = json.get('id_', None)
      instance.idref = json.get('idref', None)
      if not instance.idref:
        instance.name = json.get('name', None)
      related_identities = json.get('related_identities', None)
      if related_identities:
        for related_identity in related_identities:
          related_identity = self.assemble_related_identity(instance, related_identity, cache_object)
          instance.related_identities.append(related_identity)

  def assemble_related_identity(self, parent, json, cache_object):
    instance = RelatedIdentity()
    self.set_base(instance, json, cache_object, parent)
    if json:
      identity = json.get('item', None)
      if identity:
        self.set_base(instance, json, cache_object, parent)
        identity = self.assemble_identity(instance, identity, cache_object)
        instance.item = identity
        return instance

  def assemble_datetimewithprecision(self, parent, json, cache_object):
    instance = DateTimeWithPrecision()
    self.set_base(instance, json, cache_object, parent)
    if json:
      value = json.get('value', None)
      if value:
        value = strings.stringToDateTime(value)
        instance.value = value
      instance.precision = json.get('precision', 'seconds')

  def assemble_cybox_time(self, parent, json, cache_object):
    instance = CyboxTime()
    self.set_base(instance, json, cache_object, parent)
    if json:
      start_time = json.get('start_time', None)
      if start_time:
        start_time = self.assemble_datetimewithprecision(instance, json, cache_object)
        instance.start_time = start_time
      end_time = json.get('end_time', None)
      if end_time:
        end_time = self.assemble_datetimewithprecision(instance, json, cache_object)
        instance.end_time = end_time
      produced_time = json.get('produced_time', None)
      if produced_time:
        produced_time = self.assemble_datetimewithprecision(instance, json, cache_object)
        instance.start_time = produced_time
      received_time = json.get('received_time', None)
      if received_time:
        received_time = self.assemble_datetimewithprecision(instance, json, cache_object)
        instance.start_time = received_time

  def assemble_handling(self, parent, json, cache_object):
    result = list()
    if json:
      for markin_specification in json:
        markin_specification = self.assemble_marking_specification(parent, markin_specification, cache_object)
        if markin_specification:
          result.append(markin_specification)
      return result

  def assemble_marking_specification(self, parent, json, cache_object):
    instance = MarkingSpecification()
    self.set_base(instance, json, cache_object, parent)
    if json:
      instance.id_ = json.get('id_', None)
      instance.version = json.get('version', None)
      instance.controlled_structure = json.get('controlled_structure', None)
      marking_structures = json.get('marking_structures', list())
      for marking_structure in marking_structures:
        marking_structure = self.assemble_marking_structure(instance, marking_structure, cache_object)
        if marking_structure:
          instance.marking_structures.append(marking_structure)

      information_source = json.get('information_source', None)
      if information_source:
        information_source = self.assemble_information_source(instance, information_source, cache_object)
        instance.information_source = information_source
      if instance.marking_structures:
        return instance

  def assemble_marking_structure(self, parent, json, cache_object):
    # TODO: detect polymorphism!
    instance = MarkingStructure()
    self.set_base(instance, json, cache_object, parent)
    if json:
      instance.id_ = json.get('id_', None)
      instance.marking_model_name = json.get('marking_model_name', None)
      instance.marking_model_ref = json.get('marking_model_ref', None)
      return instance

  def assemble_toolinformation(self, parent, json, cache_object):
    instance = ToolInformation()
    self.set_base(instance, json, cache_object, parent)
    if json:
      instance.id_ = json.get('id_', None)
      instance.idref = json.get('idref', None)
      if not instance.idref:
        instance.name = json.get('name', None)
        description = json.get('description', None)
        if description:
          description = self.assemble_structured_text(instance, description, cache_object)
          instance.description = description
        instance.vendor = json.get('vendor', None)
        instance.version = json.get('version', None)
        instance.service_pack = json.get('service_pack', None)
        instance.title = json.get('title', None)
        short_description = json.get('description', None)
        if short_description:
          short_description = self.assemble_structured_text(instance, short_description, cache_object)
          instance.short_description = short_description

      return instance

  def assemble_information_source_role(self, parent, json, cache_object):
    instance = InformationSourceRole()
    self.set_base(instance, json, cache_object, parent)
    if json:
      role = json.get('role', None)
      if role:
        instance.role = role
        return instance

  def create_information_source(self, parent, json, cache_object, role='Initial Author'):
    information_source = InformationSource()
    self.set_base(information_source, json, cache_object, parent)
    isrole = InformationSourceRole()
    isrole.role = role
    self.set_base(isrole, json, cache_object, information_source)
    # TODO: use variable instead
    information_source.roles.append(isrole)
    information_source.identity = Identity()
    self.set_base(information_source.identity, json, cache_object, information_source)
    if not information_source.identity.name:
      information_source.identity.name = cache_object.user.group.name
    return information_source
